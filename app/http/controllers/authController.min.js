function authController(){const e=e=>"service_provider"===e.user.role?"/service_provider/orders":"supplier"===e.user.role?"/supplier/orders":"admin"===e.user.role?"/admin/users":"rider"===e.user.role?"/rider/orders":void 0,r=async(e,r,s)=>{try{const a=nodemailer.createTransport({host:"smtp.gmail.com",port:465,secure:!0,requireTLS:!0,auth:{user:config.emailUser,pass:config.emailPassword}}),o={from:config.emailUser,to:r,subject:" For verification mail",html:"<p> Hi "+e+', please click here to <a href="http://parcour.herokuapp.com/verify?id='+s+'"> Verify </a> your email.</p>'};a.sendMail(o,function(e,r){e?console.log(e):console.log("Email has been sent:-",r.response)})}catch(e){console.log(e.mesage)}},s=async(e,r,s)=>{try{const a=nodemailer.createTransport({host:"smtp.gmail.com",port:465,secure:!0,requireTLS:!0,auth:{user:config.emailUser,pass:config.emailPassword}}),o={from:config.emailUser,to:r,subject:" For Reset Password",html:"<p> Hi "+e+', please click here to <a href="http://parcour.herokuapp.com/reset_password?token='+s+'"> Reset </a> your password.</p>'};a.sendMail(o,function(e,r){e?console.log(e):console.log("Email has been sent:-",r.response)})}catch(e){console.log(e.mesage)}};return{login(e,r){r.render("auth/login")},postLogin(r,s,a){const{email:o,password:i}=r.body;if(!o||!i)return r.flash("error","All fields are required!"),s.redirect("/login");passport.authenticate("local",(o,i,t)=>o?(r.flash("error",t.message),a(o)):i?void r.logIn(i,o=>o?(r.flash("error",t.message),a(o)):s.redirect(e(r))):(r.flash("error",t.message),s.redirect("/login")))(r,s,a)},register(e,r){r.render("auth/register")},async postRegister(e,r){const{name:s,company_name:a,phone:o,address:i,email:t,password:n,confirm_password:l}=e.body;if(!(s&&a&&o&&i&&t&&n&&l))return e.flash("error","All fields are required!"),e.flash("name",s),e.flash("company_name",a),e.flash("phone",o),e.flash("address",i),e.flash("email",t),r.redirect("/register");if(User.exists({email:t},(n,l)=>{if(l)return e.flash("error","Email already taken!"),e.flash("name",s),e.flash("company_name",a),e.flash("phone",o),e.flash("address",i),e.flash("email",t),r.redirect("/register")}),n!=l)return e.flash("error","Password don't match!"),e.flash("name",s),e.flash("company_name",a),e.flash("phone",o),e.flash("address",i),e.flash("email",t),r.redirect("/register");const c=await bcrypt.hash(n,10),d=new User({name:s,company_name:a,phone:o,address:i,email:t,password:c});d.save().then(e=>r.redirect("/verification")).catch(s=>(e.flash("error","Something went wrong!"),r.redirect("/register")))},logout:(e,r)=>(e.logout(),r.redirect("/login")),forgetLoad(e,r){try{const s=e.session.sentlink;e.session.sentlink=null,r.render("auth/forgot_password",{sentlink:s})}catch(e){console.log(e.message)}},async forgetVerify(e,r){try{const a=e.body.email;if(null!=a){const o=await User.findOne({email:a});if(o){if(!1===o.is_verified)return e.flash("error","Please verify your email"),r.redirect("/forgot_password");{const i=randomstring.generate();await User.updateOne({email:a},{$set:{token:i}});return s(o.name,o.email,i),e.flash("success","Please check your email to reset your password!"),r.redirect("/forgot_password")}}return e.flash("error","The email does not exist!"),e.flash("email",a),r.redirect("/forgot_password")}return e.flash("error","Please input email!"),r.redirect("/forgot_password")}catch(e){console.log(e.message)}},async resetPasswordLoad(e,r){try{const s=e.query.token,a=await User.findOne({token:s});a?r.render("auth/reset_password",{user_id:a._id}):r.render("errors/404",{message:"Token is invalid"})}catch(e){console.log(e.message)}},async resetPassword(e,r){try{const s=e.body.password,a=e.body.user_id,o=await bcrypt.hash(s,10),i=await User.findByIdAndUpdate({_id:a},{$set:{password:o,token:""}});return console.log(i),r.redirect("/login")}catch(e){console.log(e.message)}},async verificationLoad(e,r){try{if(e.user){const s=e.user.email;r.render("auth/verification",{email:s})}else r.render("auth/verification",{email:email})}catch(e){console.log(e.message)}},async verifyMail(e,r){try{const s=await User.updateOne({_id:e.query.id},{$set:{is_verified:!0}});console.log(s),r.render("auth/email_verified")}catch(e){console.log(e.message)}},async sentVerificationLink(e,s){try{const a=e.body.email,o=await User.findOne({email:a});if(o)return r(o.name,o.email,o._id),e.flash("success","Reset verification link sent successfully. Please check your email."),s.redirect("/verification");e.flash("error","The email does not exist"),s.render("auth/verification",{email:a})}catch(e){console.log(e.message)}},async changePassLoad(e,r){try{if(e.user){const s=e.session.passwordedited;e.session.passwordedited=null;const a=await User.findById(e.user._id);r.render("change_password",{user_id:a._id,passwordEdited:s})}}catch(e){console.log(e.message)}},async editPass(e,r){try{const{user_id:s,current_password:a,new_password:o,confirm_password:i}=e.body,t=await User.findById({_id:s});if(!a||!o||!i)return e.flash("error","All fields are required!"),r.redirect("/change_password");const n=await bcrypt.compare(a,t.password);if(n){if(o==i){const a=await bcrypt.hash(o,10);await User.findByIdAndUpdate({_id:s},{$set:{password:a}});return e.session.passwordedited=!0,e.flash("success","Your password has been updated"),r.redirect("/change_password")}return e.flash("error","Password don't match"),r.redirect("/change_password")}return e.flash("error","Wrong password"),r.redirect("/change_password")}catch(e){console.log(e)}}}}const User=require("../../models/user"),bcrypt=require("bcrypt"),passport=require("passport"),randomstring=require("randomstring"),nodemailer=require("nodemailer"),config=require("../../config/config"),{clearConfigCache:clearConfigCache}=require("prettier");module.exports=authController;
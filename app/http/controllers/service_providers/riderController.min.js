function riderController(){return{async index(e,r){const d=e.session.rideradded,s=e.session.ridersearched,i=e.session.term_rider;e.session.term_rider=null,e.session.ridersearched=null,e.session.rideradded=null;const a=await Rider.find({company_name:e.user.company_name});return r.render("service_provider/riders",{riders:a,riderAdded:d,searchedRider:s,term_rider:i})},async search(e,r){const{term_rider:d}=e.body;if(!d)return r.redirect("/service_provider/riders");await Rider.find({$text:{$search:d},company_name:e.user.company_name},{score:{$meta:"textScore"}},(s,i)=>{if(s)return e.flash("error","Error! Something went wrong"),r.redirect("/service_provider/riders");i.length||e.flash("blank",d)}).sort({score:{$meta:"textScore"}}).then(s=>(e.session.ridersearched=s,e.session.term_rider=d,r.redirect("/service_provider/riders"))).catch(d=>(e.flash("error","Error! Something went wrong"),r.redirect("/service_provider/riders")))},addRider:(e,r)=>r.render("service_provider/add_rider"),async store(e,r){const{name:d,license:s,age:i,gender:a,image:n,phone:o,address:t,email:c}=e.body;if(!(d&&n&&s&&i&&o&&t&&c))return e.flash("error","All fields are required!"),e.flash("name",d),e.flash("license",s),e.flash("age",i),e.flash("image",n),e.flash("phone",o),e.flash("address",t),e.flash("email",c),r.redirect("/service_provider/add_rider");Rider.exists({license:s},(s,l)=>{if(l)return e.flash("error","You already created this rider user!"),e.flash("name",d),e.flash("age",i),e.flash("gender",a),e.flash("image",n),e.flash("phone",o),e.flash("address",t),e.flash("email",c),r.redirect("/service_provider/add_rider")});const l=await bcrypt.hash("rider",10),h=new Rider({name:d,company_name:e.user.company_name,license:s,age:i,gender:a,image:n,phone:o,address:t,email:c,password:l}),m=new User({name:d,role:"rider",company_name:e.user.company_name,phone:o,address:t,email:c,password:l});m.save(),h.save().then(d=>(e.session.rideradded=!0,r.redirect("/service_provider/riders"))).catch(d=>(e.flash("error","Something went wrong! "),r.redirect("/service_provider/add_rider")))},editRider(e,r){const d=e.session.rideredited;e.session.rideredited=null,Rider.findById(e.params.id,(e,s)=>{if(e)return console.log(e);r.render("service_provider/edit_rider",{id:s._id,name:s.name,image:s.image,license:s.license,age:s.age,gender:s.gender,phone:s.phone,address:s.address,riderEdited:d})})},async edit(e,r){var d=e.params.id;const{name:s,image:i,license:a,age:n,gender:o,phone:t,address:c}=e.body;if(!(s&&i&&a&&n&&t&&c))return e.flash("error","All fields are required!"),e.flash("name",s),e.flash("license",a),e.flash("age",n),e.flash("image",i),e.flash("phone",t),e.flash("address",c),r.redirect("/service_provider/edit_rider");Rider.exists({_id:{$ne:d},name:s},(l,h)=>{if(h)return e.flash("error","You cannot edit a rider of different name!"),e.flash("license",a),e.flash("age",n),e.flash("image",i),e.flash("phone",t),e.flash("address",c),r.redirect("/service_provider/edit_rider/"+d);{const l=User.find({name:s});Rider.findById(d,(r,d)=>{if(r)return console.log(r);d.name=s,d.license=a,d.age=n,d.gender=o,d.image=i,d.phone=t,d.address=c,l.name=s,l.phone=t,l.address=c,l.save(),d.save(r=>{if(r)return console.log(r);Rider.find(function(r,d){r?console.log(r):e.app.locals.riders=d})})}).then(s=>(e.flash("success","Rider edited!"),e.session.rideredited=!0,r.redirect("/service_provider/edit_rider/"+d))).catch(s=>(e.flash("error","Something went wrong!"),r.redirect("/service_provider/edit_rider/"+d)))}})},async delete(e,r){const d=await Rider.findById(e.params.id);User.findOneAndDelete({name:d.name},e=>{if(e)return console.log(e)}),Rider.findByIdAndRemove(e.params.id,d=>d?console.log(d):(Rider.find((r,d)=>{r?console.log(r):e.app.locals.riders=d}),r.redirect("/service_provider/riders")))}}}const Rider=require("../../../models/rider"),User=require("../../../models/user"),bcrypt=require("bcrypt"),user=require("../../../models/user");module.exports=riderController;